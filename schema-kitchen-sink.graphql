# Filename: schema-kitchen-sink.graphql

schema {
  query: QueryType
  mutation: MutationType
}

"""
object description
"""
type Foo implements Bar & Baz {
  """one field description"""
  one: Type
  two(argument: InputType!): Type
  three(argument: InputType, """arg description""" other: String): Int
  """four field description"""
  four(argument: String = "string"): String
  five(argument: [String] = ["string", "string"]): String
  six(argument: InputType = {key: "value"}): Type
}

type AnnotatedObject @onObject(arg: "value") {
  annotatedField(arg: Type = "default" @onArg): Type @onField
}

"""interface description

multiple lines"""
interface Bar {
  one: Type
  four(argument: String = "string"): String
}

interface AnnotatedInterface @onInterface {
  annotatedField(arg: Type @onArg): Type @onField
}

union Feed = Story | Article | Advert

"""union description"""
union AnnotatedUnion @onUnion = A | B

"""scalar description"""
scalar CustomScalar

scalar AnnotatedScalar @onScalar

"""enum description"""
enum Site {
  DESKTOP
  """enum member description"""
  MOBILE
}

enum AnnotatedEnum @onEnum {
  ANNOTATED_VALUE @onEnumValue
  OTHER_VALUE
}

"""input description"""
input InputType {
  key: String!
  """input value description"""
  answer: Int = 42
}

input AnnotatedInput @onInputObjectType {
  annotatedField: Type @onField
}

extend type Foo {
  seven(argument: [String]): Type
}

extend type Foo @onType {}

type NoFields {}

"""directive description"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include(if: Boolean!)
  on FIELD
  | FRAGMENT_SPREAD
  | INLINE_FRAGMENT
